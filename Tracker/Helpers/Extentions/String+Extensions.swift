//
//  String+Extensions.swift
//  Tracker
//
//  Created by –ê–ª—å–±–µ—Ä—Ç –•–∞–π–¥–∞—Ä–æ–≤ on 11.01.2024.
//

import Foundation

private let dateTimeDefaultFormatterDate: DateFormatter = {
    let dateFormatter = DateFormatter()
    dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ssZ"
    dateFormatter.timeZone = TimeZone(secondsFromGMT: 0)
    return dateFormatter
}()

extension String {
    var dateTimeDateFromString: Date? { dateTimeDefaultFormatterDate.date(from: self) }
}

private let dateTimeISO8601FormatterDate: ISO8601DateFormatter = {
    let dateFormatter = ISO8601DateFormatter()
    return dateFormatter
}()

extension String {
    var dateISO8601TimeDateFromString: Date? {dateTimeISO8601FormatterDate.date(from: self)}
    
    static let emojiesCollection = [
        "üôÇ", "üòª", "üå∫", "üê∂", "‚ù§Ô∏è", "üò±",
        "üòá", "üò°", "ü•∂", "ü§î", "üôå", "üçî",
        "ü•¶", "üèì", "ü•á", "üé∏", "üèù", "üò™"
    ]
    
    func weekdayFromInt(_ weekDay: Int) -> String {
        switch weekDay {
        case 1: return "–ü–Ω"
        case 2: return "–í—Ç"
        case 3: return "–°—Ä"
        case 4: return "–ß—Ç"
        case 5: return "–ü—Ç"
        case 6: return "–°–±"
        case 7: return "–í—Å"
        default: break
        }
        return "Weekday"
    }
    
    func shortDays(for weekDay: String) -> Int {
        switch weekDay {
        case "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": return 1
        case "–í—Ç–æ—Ä–Ω–∏–∫": return 2
        case "–°—Ä–µ–¥–∞": return 3
        case "–ß–µ—Ç–≤–µ—Ä–≥": return 4
        case "–ü—è—Ç–Ω–∏—Ü–∞": return 5
        case "–°—É–±–±–æ—Ç–∞": return 6
        case "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": return 7
        default: return 100
        }
    }
}
